 功能：实现游戏、与简单的通信
 协议（h.type）说明：
		1001：注册协议
		1002：登录协议
		1004：世界聊天
		1005：游戏协议
		1006：查询协议
		1007：查看所有在线用户协议
		1008：心跳包协议
		1009：加分协议
实现：
服务器
0、创建所有用户信息链表，创建在线用户信息链表
1、创建套接字、绑定、监听
2、开启心跳检测线程；
3、创建一个efd（epoll_creat），添加监听套接字sfd并添加监听事件EPOLLIN到efd中（epoll_ctl）
4、创建一个while（1）循环，epoll_wait来检测监听套接字事件
	当有新的事件发生时,遍历时间结构体数组：
	2.1、如果是监听套接字sfd(evs[i].data.fd)发生变化，则是有新客户端请求链接，
		2.1.1、用accept接收新的客户端链接
		2.1.2、添加新的套接字cfd、ip、端口号、协议族到在线链表中
		3.1.3、将存放到添加到efd中监听事件
	4.2、如果是cfd有可读事件，事件结构体数组中找到该事件的cfd（evs[i]），并执行解析：
		4.2.1、读取信息的头部（read（cfd,&h,4））,h.type
		4.2.2、注册事项
			   1、如果h.type==1001，说明该客户端想注册新用户，
			   2、读取消息的主体部分即注册信息（read（cfd，&b，sizeof（b）））
			   3、判断用户是否存在，如果不存在的话，给客户端返h.type==10010，让其输入新的账号重新注册
			   4、如果存在的话，保存该信息到客户信息链表中，然后发送h.type==1001，告知客户端注册成功，    重新登录
		4.2.3、登录事项
			   1、如果h.type==1002, 说明该客户端想要登录
			   2、读取消息的主题部分即登录的账号密码（read（cfd，&b，sizeof（b）））	
			   3、判断用户是否存在，如果不存在的话，给客户端返h.type==10020，让其重新输入登录信息
			   4、如果存在的话，保存该用户的登录信息到在线链表中，发送h.type==10021，b.chat.name(玩家姓名),b.chat.score(玩家分数)给客户端，告知其登陆成功
		4.2.4、世界聊天
			   1、如果h.type==1004, 说明该客户端想要世界聊天
			   2、读取消息（read（cfd，&b，sizeof（b）））	
			   3、遍历在线链表，并发送给在线客户端
		4.2.5、查找用户
			   1、如果h.type==1006, 说明该客户端想要查找某个id
			   2、读取id（read（cfd，&b，sizeof（b）））	
			   3、遍历用户链表，发送结果给申请客户端
		4.2.6、获取所有在线用户
			   1、如果h.type==1007, 说明该客户端想要获取所有在线用户
			   2、遍历在线链表，发送每一个在线用户的信息到申请客户端	
			   3、便利完毕发送信息给客户端h.type==10070，告知其完毕
		4.2.7、进入游戏
			   1、如果h.type==1005,说明客户端希望进行五子棋游戏
			   2、创建数组 static int ncfd[2],状态量 static int 	flag=1（该变量表示等待游戏的玩家数，当数量为2时，就可以给两名玩家打开游戏）；
			   3、保存第一个申请游戏的玩家的cfd到ncfd[0]、状态量flag+=1，即flag=2；
			   4、再有新的客户端申请游戏的话，将第二个玩家的cfd保存到ncfd[1],此时因为状态量已经为2，可以开放一个游戏室给两个玩家，“此时赋值给将”，赋值状态量为1（这样能够让以后的玩家创				建房间），执行游戏，将数组的地址ncfd传给执行 游戏处理函数play_wuziqi(ncfd)
						ps：关于游戏先后问题的处理，在打开游戏之前，两个客户端在 读阻塞状态，当服务器要发送协议告诉客户端可游戏时，做以下处理:
			   			1、赋值h.tye=10050（游戏先手协议）,然后写给套接字为ncfd[0]的客户端玩家（write（ncfd[0],&h,sizeof(h)））,遍历在线链表找到cfd[1]
			   			，找到该套接字对应的玩家2信息，告知玩家1，可以先手下棋了；
			   			2、赋值h.tye=10051（游戏先手协议）,然后写给套接字为ncfd[1]的客户端玩家（write（ncfd[1],&h,sizeof(h)））,遍历在线链表找到cfd[0]
			   			，找到该套接字对应的玩家1的信息，发送给玩家2，告知玩家2，需要等待玩家1下棋；
		4.2.8、查询处理
				1、如果h.type==1006，说明客户端希望查询一个id
				2、读取b中包含的id，遍历所用用户找到该id的信息，发送客户，否则发送失败
		4.2.9、查看在线处理
				1、如果h.type==1007，说明客户端希望查询在线用户
				2、遍历在线用户，逐个发送给申请客户端
		4.2.10、心跳处理
				1、如果h.type==1008，说明客户端在线
				2、遍历在线链表，给该在线用户的心跳技术+1
		4.2.11、加分处理
				1、如果h.type==1009，说明该用户赢得了一个游戏
				2、遍历所有用户，找到该用户，给玩家加分，保存文档



客户端
1、创建tcp套接字，绑定、链接
   创建udp套接字，绑定
2、 开辟线程向服务器发送心跳包
3、	进入主菜单选项：
		3.1登录：
		while（1）
		{	
			1、输入账号密码，分别保存到结构体b中的b.chat.id,b.chat.pwd中，
			2、赋值h.type==1002，发送结构体h、b到服务器进行登录验证
			3、阻塞 直到读到服务器回复的头部h，read（sfd，&h，4）
			4、判断登录是否成功，如果h=10021，说明登陆成功，然后继续主体b，read（sfd,&b,sizeof(b)）
			   获取该玩家的 游戏名（b.chat.name）、分数（b.chat.score），然后进入下一级菜单；
			5、否则提示重新输入账号密码；
		}
		3.2注册：
		while（1）
		{	
			1、输入要注册的账号、密码、姓名等注册信息，分别保存到结构体b中，
			2、赋值h.type==1001，发送结构体h、b到服务器进行注册
			3、阻塞 直到读到服务器回复的头部h，read（sfd，&h，4）
			4、判断注册是否成功，如果h=10011，说明注册成功，提示玩家重新登录
			5、如果h=10010，说明注册失败（账号已经存在），提示玩家重新输入注册信息
		}
		3.3退出
			exit(0);
3、进入二级菜单
		4.1游戏选项，进入游戏菜单界面
		4.2世界聊天
			向服务器发送1004协议告诉服务器进入到世界聊天状态
		4.3查找玩家
			输入要查找的id，向服务器发送1006协议，向服务其申请该id信息
		4.4查看在线玩家
			向服务器发送1007协议，申请获取所有在线玩家
		4.5注销

5、进入到游戏菜单界面：
		5.1、选择游戏:五子棋，向服务器发送游戏协议1005
		5.2、提示等待匹配，阻塞 直到读到服务器发来的头部信息h，read（sfd，&h，sizeof（h））；
		5.3、根据h.type判断游戏的先后手，然后读取结构体b中对手的ip与port来connect，进行udp传输：
			1、如果h.type==10051，说明玩家先手下棋
				①调用函数获取玩家该回合所下棋子信息，并赋值给结构体b中的b.chat.x、b.chat.y ；
				②判断玩家是否获胜，如果获胜，赋值状态量b.chat.flag=1（获胜）；
				③将包含棋子以及状态量信息的结构体b发送给玩家，write（sfd，&b，sizeof（b）），如果玩家	 已经获胜，跳出游戏，并发送加分协议1009给客户端，回到游戏界面；
				④阻塞 直到读到对手发送的棋子信息
				⑥判断判断玩家是否失败，如果失败，跳出循环，回到主界面；
			2、如果h.type==10050, 说明玩家后手等待
				①阻塞 直到读到对手发送的棋子信息
				②判断判断自己是否失败，如果失败，跳出循环，回到主界面；
				③调用函数获取玩家该回合所下棋子信息，并赋值给结构体b中的b.chat.x、b.chat.y ；
				④判断玩家是否获胜，如果获胜，赋值状态量b.chat.flag=1（获胜）；
				⑤将包含棋子以及状态量信息的结构体b发送给对手，write（sfd，&b，sizeof（b）），如果自己  已经获胜，跳出游戏，回到游戏界面；












